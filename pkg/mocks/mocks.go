// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/kubelego_const/interfaces.go

package mocks

import (
	logrus "github.com/Sirupsen/logrus"
	gomock "github.com/golang/mock/gomock"
	. "github.com/jetstack/kube-lego/pkg/kubelego_const"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
	kubernetes "k8s.io/client-go/kubernetes"
	v1 "k8s.io/client-go/pkg/api/v1"
	v1beta1 "k8s.io/client-go/pkg/apis/extensions/v1beta1"
	net "net"
	reflect "reflect"
	time "time"
)

// MockKubeLego is a mock of KubeLego interface
type MockKubeLego struct {
	ctrl     *gomock.Controller
	recorder *MockKubeLegoMockRecorder
}

// MockKubeLegoMockRecorder is the mock recorder for MockKubeLego
type MockKubeLegoMockRecorder struct {
	mock *MockKubeLego
}

// NewMockKubeLego creates a new mock instance
func NewMockKubeLego(ctrl *gomock.Controller) *MockKubeLego {
	mock := &MockKubeLego{ctrl: ctrl}
	mock.recorder = &MockKubeLegoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockKubeLego) EXPECT() *MockKubeLegoMockRecorder {
	return _m.recorder
}

// KubeClient mocks base method
func (_m *MockKubeLego) KubeClient() *kubernetes.Clientset {
	ret := _m.ctrl.Call(_m, "KubeClient")
	ret0, _ := ret[0].(*kubernetes.Clientset)
	return ret0
}

// KubeClient indicates an expected call of KubeClient
func (_mr *MockKubeLegoMockRecorder) KubeClient() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "KubeClient", reflect.TypeOf((*MockKubeLego)(nil).KubeClient))
}

// Log mocks base method
func (_m *MockKubeLego) Log() *logrus.Entry {
	ret := _m.ctrl.Call(_m, "Log")
	ret0, _ := ret[0].(*logrus.Entry)
	return ret0
}

// Log indicates an expected call of Log
func (_mr *MockKubeLegoMockRecorder) Log() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Log", reflect.TypeOf((*MockKubeLego)(nil).Log))
}

// AcmeClient mocks base method
func (_m *MockKubeLego) AcmeClient() Acme {
	ret := _m.ctrl.Call(_m, "AcmeClient")
	ret0, _ := ret[0].(Acme)
	return ret0
}

// AcmeClient indicates an expected call of AcmeClient
func (_mr *MockKubeLegoMockRecorder) AcmeClient() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AcmeClient", reflect.TypeOf((*MockKubeLego)(nil).AcmeClient))
}

// LegoHTTPPort mocks base method
func (_m *MockKubeLego) LegoHTTPPort() intstr.IntOrString {
	ret := _m.ctrl.Call(_m, "LegoHTTPPort")
	ret0, _ := ret[0].(intstr.IntOrString)
	return ret0
}

// LegoHTTPPort indicates an expected call of LegoHTTPPort
func (_mr *MockKubeLegoMockRecorder) LegoHTTPPort() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoHTTPPort", reflect.TypeOf((*MockKubeLego)(nil).LegoHTTPPort))
}

// LegoEmail mocks base method
func (_m *MockKubeLego) LegoEmail() string {
	ret := _m.ctrl.Call(_m, "LegoEmail")
	ret0, _ := ret[0].(string)
	return ret0
}

// LegoEmail indicates an expected call of LegoEmail
func (_mr *MockKubeLegoMockRecorder) LegoEmail() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoEmail", reflect.TypeOf((*MockKubeLego)(nil).LegoEmail))
}

// LegoURL mocks base method
func (_m *MockKubeLego) LegoURL() string {
	ret := _m.ctrl.Call(_m, "LegoURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// LegoURL indicates an expected call of LegoURL
func (_mr *MockKubeLegoMockRecorder) LegoURL() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoURL", reflect.TypeOf((*MockKubeLego)(nil).LegoURL))
}

// LegoNamespace mocks base method
func (_m *MockKubeLego) LegoNamespace() string {
	ret := _m.ctrl.Call(_m, "LegoNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// LegoNamespace indicates an expected call of LegoNamespace
func (_mr *MockKubeLegoMockRecorder) LegoNamespace() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoNamespace", reflect.TypeOf((*MockKubeLego)(nil).LegoNamespace))
}

// LegoWatchNamespace mocks base method
func (_m *MockKubeLego) LegoWatchNamespace() string {
	ret := _m.ctrl.Call(_m, "LegoWatchNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// LegoWatchNamespace indicates an expected call of LegoWatchNamespace
func (_mr *MockKubeLegoMockRecorder) LegoWatchNamespace() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoWatchNamespace", reflect.TypeOf((*MockKubeLego)(nil).LegoWatchNamespace))
}

// LegoIngressNameNginx mocks base method
func (_m *MockKubeLego) LegoIngressNameNginx() string {
	ret := _m.ctrl.Call(_m, "LegoIngressNameNginx")
	ret0, _ := ret[0].(string)
	return ret0
}

// LegoIngressNameNginx indicates an expected call of LegoIngressNameNginx
func (_mr *MockKubeLegoMockRecorder) LegoIngressNameNginx() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoIngressNameNginx", reflect.TypeOf((*MockKubeLego)(nil).LegoIngressNameNginx))
}

// LegoServiceNameNginx mocks base method
func (_m *MockKubeLego) LegoServiceNameNginx() string {
	ret := _m.ctrl.Call(_m, "LegoServiceNameNginx")
	ret0, _ := ret[0].(string)
	return ret0
}

// LegoServiceNameNginx indicates an expected call of LegoServiceNameNginx
func (_mr *MockKubeLegoMockRecorder) LegoServiceNameNginx() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoServiceNameNginx", reflect.TypeOf((*MockKubeLego)(nil).LegoServiceNameNginx))
}

// LegoServiceNameGce mocks base method
func (_m *MockKubeLego) LegoServiceNameGce() string {
	ret := _m.ctrl.Call(_m, "LegoServiceNameGce")
	ret0, _ := ret[0].(string)
	return ret0
}

// LegoServiceNameGce indicates an expected call of LegoServiceNameGce
func (_mr *MockKubeLegoMockRecorder) LegoServiceNameGce() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoServiceNameGce", reflect.TypeOf((*MockKubeLego)(nil).LegoServiceNameGce))
}

// LegoDefaultIngressClass mocks base method
func (_m *MockKubeLego) LegoDefaultIngressClass() string {
	ret := _m.ctrl.Call(_m, "LegoDefaultIngressClass")
	ret0, _ := ret[0].(string)
	return ret0
}

// LegoDefaultIngressClass indicates an expected call of LegoDefaultIngressClass
func (_mr *MockKubeLegoMockRecorder) LegoDefaultIngressClass() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoDefaultIngressClass", reflect.TypeOf((*MockKubeLego)(nil).LegoDefaultIngressClass))
}

// LegoDefaultIngressProvider mocks base method
func (_m *MockKubeLego) LegoDefaultIngressProvider() string {
	ret := _m.ctrl.Call(_m, "LegoDefaultIngressProvider")
	ret0, _ := ret[0].(string)
	return ret0
}

// LegoDefaultIngressProvider indicates an expected call of LegoDefaultIngressProvider
func (_mr *MockKubeLegoMockRecorder) LegoDefaultIngressProvider() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoDefaultIngressProvider", reflect.TypeOf((*MockKubeLego)(nil).LegoDefaultIngressProvider))
}

// LegoSupportedIngressClass mocks base method
func (_m *MockKubeLego) LegoSupportedIngressClass() []string {
	ret := _m.ctrl.Call(_m, "LegoSupportedIngressClass")
	ret0, _ := ret[0].([]string)
	return ret0
}

// LegoSupportedIngressClass indicates an expected call of LegoSupportedIngressClass
func (_mr *MockKubeLegoMockRecorder) LegoSupportedIngressClass() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoSupportedIngressClass", reflect.TypeOf((*MockKubeLego)(nil).LegoSupportedIngressClass))
}

// LegoSupportedIngressProvider mocks base method
func (_m *MockKubeLego) LegoSupportedIngressProvider() []string {
	ret := _m.ctrl.Call(_m, "LegoSupportedIngressProvider")
	ret0, _ := ret[0].([]string)
	return ret0
}

// LegoSupportedIngressProvider indicates an expected call of LegoSupportedIngressProvider
func (_mr *MockKubeLegoMockRecorder) LegoSupportedIngressProvider() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoSupportedIngressProvider", reflect.TypeOf((*MockKubeLego)(nil).LegoSupportedIngressProvider))
}

// LegoCheckInterval mocks base method
func (_m *MockKubeLego) LegoCheckInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "LegoCheckInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// LegoCheckInterval indicates an expected call of LegoCheckInterval
func (_mr *MockKubeLegoMockRecorder) LegoCheckInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoCheckInterval", reflect.TypeOf((*MockKubeLego)(nil).LegoCheckInterval))
}

// LegoMinimumValidity mocks base method
func (_m *MockKubeLego) LegoMinimumValidity() time.Duration {
	ret := _m.ctrl.Call(_m, "LegoMinimumValidity")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// LegoMinimumValidity indicates an expected call of LegoMinimumValidity
func (_mr *MockKubeLegoMockRecorder) LegoMinimumValidity() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoMinimumValidity", reflect.TypeOf((*MockKubeLego)(nil).LegoMinimumValidity))
}

// ExponentialBackoffMaxElapsedTime mocks base method
func (_m *MockKubeLego) ExponentialBackoffMaxElapsedTime() time.Duration {
	ret := _m.ctrl.Call(_m, "ExponentialBackoffMaxElapsedTime")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ExponentialBackoffMaxElapsedTime indicates an expected call of ExponentialBackoffMaxElapsedTime
func (_mr *MockKubeLegoMockRecorder) ExponentialBackoffMaxElapsedTime() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ExponentialBackoffMaxElapsedTime", reflect.TypeOf((*MockKubeLego)(nil).ExponentialBackoffMaxElapsedTime))
}

// ExponentialBackoffInitialInterval mocks base method
func (_m *MockKubeLego) ExponentialBackoffInitialInterval() time.Duration {
	ret := _m.ctrl.Call(_m, "ExponentialBackoffInitialInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// ExponentialBackoffInitialInterval indicates an expected call of ExponentialBackoffInitialInterval
func (_mr *MockKubeLegoMockRecorder) ExponentialBackoffInitialInterval() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ExponentialBackoffInitialInterval", reflect.TypeOf((*MockKubeLego)(nil).ExponentialBackoffInitialInterval))
}

// ExponentialBackoffMultiplier mocks base method
func (_m *MockKubeLego) ExponentialBackoffMultiplier() float64 {
	ret := _m.ctrl.Call(_m, "ExponentialBackoffMultiplier")
	ret0, _ := ret[0].(float64)
	return ret0
}

// ExponentialBackoffMultiplier indicates an expected call of ExponentialBackoffMultiplier
func (_mr *MockKubeLegoMockRecorder) ExponentialBackoffMultiplier() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ExponentialBackoffMultiplier", reflect.TypeOf((*MockKubeLego)(nil).ExponentialBackoffMultiplier))
}

// LegoPodIP mocks base method
func (_m *MockKubeLego) LegoPodIP() net.IP {
	ret := _m.ctrl.Call(_m, "LegoPodIP")
	ret0, _ := ret[0].(net.IP)
	return ret0
}

// LegoPodIP indicates an expected call of LegoPodIP
func (_mr *MockKubeLegoMockRecorder) LegoPodIP() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoPodIP", reflect.TypeOf((*MockKubeLego)(nil).LegoPodIP))
}

// LegoRsaKeySize mocks base method
func (_m *MockKubeLego) LegoRsaKeySize() int {
	ret := _m.ctrl.Call(_m, "LegoRsaKeySize")
	ret0, _ := ret[0].(int)
	return ret0
}

// LegoRsaKeySize indicates an expected call of LegoRsaKeySize
func (_mr *MockKubeLegoMockRecorder) LegoRsaKeySize() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "LegoRsaKeySize", reflect.TypeOf((*MockKubeLego)(nil).LegoRsaKeySize))
}

// IngressProvider mocks base method
func (_m *MockKubeLego) IngressProvider(_param0 string) (IngressProvider, error) {
	ret := _m.ctrl.Call(_m, "IngressProvider", _param0)
	ret0, _ := ret[0].(IngressProvider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IngressProvider indicates an expected call of IngressProvider
func (_mr *MockKubeLegoMockRecorder) IngressProvider(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IngressProvider", reflect.TypeOf((*MockKubeLego)(nil).IngressProvider), arg0)
}

// Version mocks base method
func (_m *MockKubeLego) Version() string {
	ret := _m.ctrl.Call(_m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version
func (_mr *MockKubeLegoMockRecorder) Version() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Version", reflect.TypeOf((*MockKubeLego)(nil).Version))
}

// AcmeUser mocks base method
func (_m *MockKubeLego) AcmeUser() (map[string][]byte, error) {
	ret := _m.ctrl.Call(_m, "AcmeUser")
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcmeUser indicates an expected call of AcmeUser
func (_mr *MockKubeLegoMockRecorder) AcmeUser() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AcmeUser", reflect.TypeOf((*MockKubeLego)(nil).AcmeUser))
}

// SaveAcmeUser mocks base method
func (_m *MockKubeLego) SaveAcmeUser(_param0 map[string][]byte) error {
	ret := _m.ctrl.Call(_m, "SaveAcmeUser", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveAcmeUser indicates an expected call of SaveAcmeUser
func (_mr *MockKubeLegoMockRecorder) SaveAcmeUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SaveAcmeUser", reflect.TypeOf((*MockKubeLego)(nil).SaveAcmeUser), arg0)
}

// MockAcme is a mock of Acme interface
type MockAcme struct {
	ctrl     *gomock.Controller
	recorder *MockAcmeMockRecorder
}

// MockAcmeMockRecorder is the mock recorder for MockAcme
type MockAcmeMockRecorder struct {
	mock *MockAcme
}

// NewMockAcme creates a new mock instance
func NewMockAcme(ctrl *gomock.Controller) *MockAcme {
	mock := &MockAcme{ctrl: ctrl}
	mock.recorder = &MockAcmeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockAcme) EXPECT() *MockAcmeMockRecorder {
	return _m.recorder
}

// ObtainCertificate mocks base method
func (_m *MockAcme) ObtainCertificate(domains []string) (map[string][]byte, error) {
	ret := _m.ctrl.Call(_m, "ObtainCertificate", domains)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObtainCertificate indicates an expected call of ObtainCertificate
func (_mr *MockAcmeMockRecorder) ObtainCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ObtainCertificate", reflect.TypeOf((*MockAcme)(nil).ObtainCertificate), arg0)
}

// ObtainCertificate2 mocks base method
func (_m *MockAcme) ObtainCertificate2(domains []string, missingDomains []string) (map[string][]byte, error) {
	ret := _m.ctrl.Call(_m, "ObtainCertificate2", domains, missingDomains)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObtainCertificate2 indicates an expected call of ObtainCertificate2
func (_mr *MockAcmeMockRecorder) ObtainCertificate2(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "ObtainCertificate2", reflect.TypeOf((*MockAcme)(nil).ObtainCertificate2), arg0, arg1)
}

// MockTls is a mock of Tls interface
type MockTls struct {
	ctrl     *gomock.Controller
	recorder *MockTlsMockRecorder
}

// MockTlsMockRecorder is the mock recorder for MockTls
type MockTlsMockRecorder struct {
	mock *MockTls
}

// NewMockTls creates a new mock instance
func NewMockTls(ctrl *gomock.Controller) *MockTls {
	mock := &MockTls{ctrl: ctrl}
	mock.recorder = &MockTlsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockTls) EXPECT() *MockTlsMockRecorder {
	return _m.recorder
}

// Hosts mocks base method
func (_m *MockTls) Hosts() []string {
	ret := _m.ctrl.Call(_m, "Hosts")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Hosts indicates an expected call of Hosts
func (_mr *MockTlsMockRecorder) Hosts() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Hosts", reflect.TypeOf((*MockTls)(nil).Hosts))
}

// SecretMetadata mocks base method
func (_m *MockTls) SecretMetadata() *v1.ObjectMeta {
	ret := _m.ctrl.Call(_m, "SecretMetadata")
	ret0, _ := ret[0].(*v1.ObjectMeta)
	return ret0
}

// SecretMetadata indicates an expected call of SecretMetadata
func (_mr *MockTlsMockRecorder) SecretMetadata() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SecretMetadata", reflect.TypeOf((*MockTls)(nil).SecretMetadata))
}

// IngressMetadata mocks base method
func (_m *MockTls) IngressMetadata() *v1.ObjectMeta {
	ret := _m.ctrl.Call(_m, "IngressMetadata")
	ret0, _ := ret[0].(*v1.ObjectMeta)
	return ret0
}

// IngressMetadata indicates an expected call of IngressMetadata
func (_mr *MockTlsMockRecorder) IngressMetadata() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IngressMetadata", reflect.TypeOf((*MockTls)(nil).IngressMetadata))
}

// Process mocks base method
func (_m *MockTls) Process() error {
	ret := _m.ctrl.Call(_m, "Process")
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process
func (_mr *MockTlsMockRecorder) Process() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Process", reflect.TypeOf((*MockTls)(nil).Process))
}

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockService) EXPECT() *MockServiceMockRecorder {
	return _m.recorder
}

// Object mocks base method
func (_m *MockService) Object() *v1.Service {
	ret := _m.ctrl.Call(_m, "Object")
	ret0, _ := ret[0].(*v1.Service)
	return ret0
}

// Object indicates an expected call of Object
func (_mr *MockServiceMockRecorder) Object() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Object", reflect.TypeOf((*MockService)(nil).Object))
}

// SetKubeLegoSpec mocks base method
func (_m *MockService) SetKubeLegoSpec() {
	_m.ctrl.Call(_m, "SetKubeLegoSpec")
}

// SetKubeLegoSpec indicates an expected call of SetKubeLegoSpec
func (_mr *MockServiceMockRecorder) SetKubeLegoSpec() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetKubeLegoSpec", reflect.TypeOf((*MockService)(nil).SetKubeLegoSpec))
}

// SetEndpoints mocks base method
func (_m *MockService) SetEndpoints(_param0 []string) error {
	ret := _m.ctrl.Call(_m, "SetEndpoints", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetEndpoints indicates an expected call of SetEndpoints
func (_mr *MockServiceMockRecorder) SetEndpoints(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SetEndpoints", reflect.TypeOf((*MockService)(nil).SetEndpoints), arg0)
}

// Save mocks base method
func (_m *MockService) Save() error {
	ret := _m.ctrl.Call(_m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (_mr *MockServiceMockRecorder) Save() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Save", reflect.TypeOf((*MockService)(nil).Save))
}

// Delete mocks base method
func (_m *MockService) Delete() error {
	ret := _m.ctrl.Call(_m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockServiceMockRecorder) Delete() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete))
}

// MockSecret is a mock of Secret interface
type MockSecret struct {
	ctrl     *gomock.Controller
	recorder *MockSecretMockRecorder
}

// MockSecretMockRecorder is the mock recorder for MockSecret
type MockSecretMockRecorder struct {
	mock *MockSecret
}

// NewMockSecret creates a new mock instance
func NewMockSecret(ctrl *gomock.Controller) *MockSecret {
	mock := &MockSecret{ctrl: ctrl}
	mock.recorder = &MockSecretMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSecret) EXPECT() *MockSecretMockRecorder {
	return _m.recorder
}

// Object mocks base method
func (_m *MockSecret) Object() *v1.Secret {
	ret := _m.ctrl.Call(_m, "Object")
	ret0, _ := ret[0].(*v1.Secret)
	return ret0
}

// Object indicates an expected call of Object
func (_mr *MockSecretMockRecorder) Object() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Object", reflect.TypeOf((*MockSecret)(nil).Object))
}

// KubeLego mocks base method
func (_m *MockSecret) KubeLego() KubeLego {
	ret := _m.ctrl.Call(_m, "KubeLego")
	ret0, _ := ret[0].(KubeLego)
	return ret0
}

// KubeLego indicates an expected call of KubeLego
func (_mr *MockSecretMockRecorder) KubeLego() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "KubeLego", reflect.TypeOf((*MockSecret)(nil).KubeLego))
}

// Exists mocks base method
func (_m *MockSecret) Exists() bool {
	ret := _m.ctrl.Call(_m, "Exists")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists
func (_mr *MockSecretMockRecorder) Exists() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Exists", reflect.TypeOf((*MockSecret)(nil).Exists))
}

// Save mocks base method
func (_m *MockSecret) Save() error {
	ret := _m.ctrl.Call(_m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (_mr *MockSecretMockRecorder) Save() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Save", reflect.TypeOf((*MockSecret)(nil).Save))
}

// TlsDomains mocks base method
func (_m *MockSecret) TlsDomains() ([]string, error) {
	ret := _m.ctrl.Call(_m, "TlsDomains")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsDomains indicates an expected call of TlsDomains
func (_mr *MockSecretMockRecorder) TlsDomains() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TlsDomains", reflect.TypeOf((*MockSecret)(nil).TlsDomains))
}

// TlsDomainsInclude mocks base method
func (_m *MockSecret) TlsDomainsInclude(domains []string) bool {
	ret := _m.ctrl.Call(_m, "TlsDomainsInclude", domains)
	ret0, _ := ret[0].(bool)
	return ret0
}

// TlsDomainsInclude indicates an expected call of TlsDomainsInclude
func (_mr *MockSecretMockRecorder) TlsDomainsInclude(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TlsDomainsInclude", reflect.TypeOf((*MockSecret)(nil).TlsDomainsInclude), arg0)
}

// MissingTlsDomains mocks base method
func (_m *MockSecret) MissingTlsDomains(domains []string) []string {
	ret := _m.ctrl.Call(_m, "MissingTlsDomains", domains)
	ret0, _ := ret[0].([]string)
	return ret0
}

// MissingTlsDomains indicates an expected call of MissingTlsDomains
func (_mr *MockSecretMockRecorder) MissingTlsDomains(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "MissingTlsDomains", reflect.TypeOf((*MockSecret)(nil).MissingTlsDomains), arg0)
}

// TlsExpireTime mocks base method
func (_m *MockSecret) TlsExpireTime() (time.Time, error) {
	ret := _m.ctrl.Call(_m, "TlsExpireTime")
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TlsExpireTime indicates an expected call of TlsExpireTime
func (_mr *MockSecretMockRecorder) TlsExpireTime() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "TlsExpireTime", reflect.TypeOf((*MockSecret)(nil).TlsExpireTime))
}

// MockIngress is a mock of Ingress interface
type MockIngress struct {
	ctrl     *gomock.Controller
	recorder *MockIngressMockRecorder
}

// MockIngressMockRecorder is the mock recorder for MockIngress
type MockIngressMockRecorder struct {
	mock *MockIngress
}

// NewMockIngress creates a new mock instance
func NewMockIngress(ctrl *gomock.Controller) *MockIngress {
	mock := &MockIngress{ctrl: ctrl}
	mock.recorder = &MockIngressMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockIngress) EXPECT() *MockIngressMockRecorder {
	return _m.recorder
}

// Object mocks base method
func (_m *MockIngress) Object() *v1beta1.Ingress {
	ret := _m.ctrl.Call(_m, "Object")
	ret0, _ := ret[0].(*v1beta1.Ingress)
	return ret0
}

// Object indicates an expected call of Object
func (_mr *MockIngressMockRecorder) Object() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Object", reflect.TypeOf((*MockIngress)(nil).Object))
}

// KubeLego mocks base method
func (_m *MockIngress) KubeLego() KubeLego {
	ret := _m.ctrl.Call(_m, "KubeLego")
	ret0, _ := ret[0].(KubeLego)
	return ret0
}

// KubeLego indicates an expected call of KubeLego
func (_mr *MockIngressMockRecorder) KubeLego() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "KubeLego", reflect.TypeOf((*MockIngress)(nil).KubeLego))
}

// Log mocks base method
func (_m *MockIngress) Log() *logrus.Entry {
	ret := _m.ctrl.Call(_m, "Log")
	ret0, _ := ret[0].(*logrus.Entry)
	return ret0
}

// Log indicates an expected call of Log
func (_mr *MockIngressMockRecorder) Log() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Log", reflect.TypeOf((*MockIngress)(nil).Log))
}

// Save mocks base method
func (_m *MockIngress) Save() error {
	ret := _m.ctrl.Call(_m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (_mr *MockIngressMockRecorder) Save() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Save", reflect.TypeOf((*MockIngress)(nil).Save))
}

// Delete mocks base method
func (_m *MockIngress) Delete() error {
	ret := _m.ctrl.Call(_m, "Delete")
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (_mr *MockIngressMockRecorder) Delete() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Delete", reflect.TypeOf((*MockIngress)(nil).Delete))
}

// IngressClass mocks base method
func (_m *MockIngress) IngressClass() string {
	ret := _m.ctrl.Call(_m, "IngressClass")
	ret0, _ := ret[0].(string)
	return ret0
}

// IngressClass indicates an expected call of IngressClass
func (_mr *MockIngressMockRecorder) IngressClass() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IngressClass", reflect.TypeOf((*MockIngress)(nil).IngressClass))
}

// IngressProvider mocks base method
func (_m *MockIngress) IngressProvider() string {
	ret := _m.ctrl.Call(_m, "IngressProvider")
	ret0, _ := ret[0].(string)
	return ret0
}

// IngressProvider indicates an expected call of IngressProvider
func (_mr *MockIngressMockRecorder) IngressProvider() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "IngressProvider", reflect.TypeOf((*MockIngress)(nil).IngressProvider))
}

// Tls mocks base method
func (_m *MockIngress) Tls() []Tls {
	ret := _m.ctrl.Call(_m, "Tls")
	ret0, _ := ret[0].([]Tls)
	return ret0
}

// Tls indicates an expected call of Tls
func (_mr *MockIngressMockRecorder) Tls() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Tls", reflect.TypeOf((*MockIngress)(nil).Tls))
}

// Ignore mocks base method
func (_m *MockIngress) Ignore() bool {
	ret := _m.ctrl.Call(_m, "Ignore")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Ignore indicates an expected call of Ignore
func (_mr *MockIngressMockRecorder) Ignore() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Ignore", reflect.TypeOf((*MockIngress)(nil).Ignore))
}

// MockIngressProvider is a mock of IngressProvider interface
type MockIngressProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIngressProviderMockRecorder
}

// MockIngressProviderMockRecorder is the mock recorder for MockIngressProvider
type MockIngressProviderMockRecorder struct {
	mock *MockIngressProvider
}

// NewMockIngressProvider creates a new mock instance
func NewMockIngressProvider(ctrl *gomock.Controller) *MockIngressProvider {
	mock := &MockIngressProvider{ctrl: ctrl}
	mock.recorder = &MockIngressProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockIngressProvider) EXPECT() *MockIngressProviderMockRecorder {
	return _m.recorder
}

// Log mocks base method
func (_m *MockIngressProvider) Log() *logrus.Entry {
	ret := _m.ctrl.Call(_m, "Log")
	ret0, _ := ret[0].(*logrus.Entry)
	return ret0
}

// Log indicates an expected call of Log
func (_mr *MockIngressProviderMockRecorder) Log() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Log", reflect.TypeOf((*MockIngressProvider)(nil).Log))
}

// Process mocks base method
func (_m *MockIngressProvider) Process(_param0 Ingress) error {
	ret := _m.ctrl.Call(_m, "Process", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Process indicates an expected call of Process
func (_mr *MockIngressProviderMockRecorder) Process(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Process", reflect.TypeOf((*MockIngressProvider)(nil).Process), arg0)
}

// Reset mocks base method
func (_m *MockIngressProvider) Reset() error {
	ret := _m.ctrl.Call(_m, "Reset")
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset
func (_mr *MockIngressProviderMockRecorder) Reset() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Reset", reflect.TypeOf((*MockIngressProvider)(nil).Reset))
}

// Finalize mocks base method
func (_m *MockIngressProvider) Finalize() error {
	ret := _m.ctrl.Call(_m, "Finalize")
	ret0, _ := ret[0].(error)
	return ret0
}

// Finalize indicates an expected call of Finalize
func (_mr *MockIngressProviderMockRecorder) Finalize() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "Finalize", reflect.TypeOf((*MockIngressProvider)(nil).Finalize))
}
